import { platform } from 'os';
import { join, sep } from 'path';
import { existsSync, rmSync, statSync } from 'fs';
import { checkCommand, explore, runGhostScript } from '../lib/lib';

// https://stackoverflow.com/a/6969486
const escapeRegExp = (regex: string): string => {
  return regex.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); // $& means the whole matched string
};

jest.setTimeout(30000); // Compress can be long depending of the PDF

test('get the correct Ghostscript command', async () => {
  const command = await checkCommand();

  if (platform() === 'win32') {
    expect(['gswin64c', 'gswin32c']).toContain(command);
  } else {
    expect(command).toBe('gs');
  }
});

test('explore and extract correct PDF files', async () => {
  const folderPath = join(__dirname, 'folders');
  const files = await explore(folderPath);

  const regex1 = `folders${sep}PlaceholderPDF.pdf`;
  const regex2 = `folders${sep}nested_folder${sep}PlaceholderPDF.pdf`;

  expect(files.length).toBe(2);

  // Order is defined by OS, so you check which file is the deepest by length of the path
  if (files[0].toString().length > files[1].toString().length) {
    expect(files[0]).toMatch(new RegExp(escapeRegExp(regex2)));
    expect(files[1]).toMatch(new RegExp(escapeRegExp(regex1)));
  } else {
    expect(files[0]).toMatch(new RegExp(escapeRegExp(regex1)));
    expect(files[1]).toMatch(new RegExp(escapeRegExp(regex2)));
  }
});

test('explore a single PDF file directly', async () => {
  const folderPath = join(__dirname, 'folders', 'PlaceholderPDF.pdf');
  const files = await explore(folderPath);

  const regex1 = `folders${sep}PlaceholderPDF.pdf`;

  expect(files.length).toBe(1);
  expect(files[0]).toMatch(new RegExp(escapeRegExp(regex1)));
});

test('compress PDF', async () => {
  const command = await checkCommand();
  const filePath = join(__dirname, 'folders', 'PlaceholderPDF.pdf');
  const files = await explore(filePath);

  const result = await runGhostScript(command, files[0].toString());

  const resultPath = join(__dirname, 'folders', 'PlaceholderPDF_compressed.pdf');

  expect(result).toBeTruthy();
  expect(existsSync(resultPath)).toBeTruthy();
  expect(statSync(filePath).size).toBeGreaterThan(statSync(resultPath).size);
});

/**
 * Remove file generated by tests
 */
afterEach(() => {
  const compressedFilePath = join(__dirname, 'folders', 'PlaceholderPDF_compressed.pdf');

  if (existsSync(compressedFilePath)) {
    rmSync(compressedFilePath);
  }
});
